name: CI

on: [ push ]

jobs:
  testing:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system:
          - ubuntu-latest
          - macos-latest
        compiler:
          - binary: clang
            configure-flags: ""
          - binary: gcc
            configure-flags: ""
          - binary: tcc
            configure-flags: ""
          - binary: pcc
            configure-flags: ""
        unhosted-flag:
          - ""
          - "-u"
        exclude:
          # TODO (dargueta): Figure out what to do about incompatible headers
          - operating-system: macos-latest
            compiler:
              binary: tcc
          - operating-system: macos-latest
            compiler:
              binary: pcc
    steps:
      - uses: actions/checkout@v3

      - name: Install Compilers
        uses: ConorMacBride/install-package@v1
        with:
          apt: clang gcc-mingw-w64 pcc tcc
          brew: gcc mingw-w64

      # TCC can't be installed via Homebrew on recent versions of macOS because
      # of an "upstream incompatibility".
      - name: Install TCC on MacOS
        if: matrix.operating-system == 'macos-latest' && matrix.compiler.binary == 'tcc'
        run: make -C make -f compilers.mk install-tcc

      - name: Install PCC on MacOS
        if: matrix.operating-system == 'macos-latest' && matrix.compiler.binary == 'pcc'
        run: make -C make -f compilers.mk install-pcc

      - name: Configure
        run: |
          ./configure -d \
                      --cc=${{ matrix.compiler.binary }} \
                      ${{ matrix.unhosted-flag }} \
                      ${{ matrix.compiler.configure-flags }}

      - name: Compile
       # env:
       #   # Only needed on OSX for TCC/PCC. This is very hacky and will break if
       #   # they upgrade XCode on the Mac runners.
       #   CFLAGS: >-
       #     -I/Applications/Xcode_14.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
       #     -I/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
       #     -I/Applications/Xcode_14.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/14.0.0/include
        run: make library

      - name: Test Installation
        run: sudo make install

      - name: Run Tests
        run: make test

  testing-sdcc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - ds390
          - ds400
          - ez80_z80
          - gbz80
          - hc08
          - mcs51
          # - mos6502 (sdcc 4.3+)
          - pdk13
          - pdk14
          - pdk15
          # - pic14 (sdcc 4.3+)
          # - pic16 (sdcc 4.3+)
          - r2k
          # - r2ka (sdcc 4.3+?)
          - r3ka
          - s08
          # - sm83 (sdcc 4.3+?)
          - stm8
          # - TININative (Buggy, crashes compiler)
          - tlcs90
          - z180
          - z80
          # - z80n (sdcc 4.3+?)
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        uses: ConorMacBride/install-package@v1
        with:
          apt: libboost-all-dev sdcc
#      # Building SDCC and gputils takes 35-45sm, so we need to cache it.
#      - name: Restore SDCC from Cache
#        id: cache-sdcc-restore
#        uses: actions/cache/restore@v3
#        with:
#          path: |
#            /usr/local/bin/as2gbmap
#            /usr/local/bin/gpasm
#            /usr/local/bin/gpdasm
#            /usr/local/bin/gplink
#            /usr/local/bin/sdas*
#            /usr/local/bin/sdcc
#            /usr/local/bin/sdld*
#            /usr/local/share/gputils
#          key: ${{ runner.os }}-sdcc
#      # The version of SDCC in the APT repository is old, so we have to install
#      # it ourselves.
#      - name: Install SDCC
#        if: steps.cache-sdcc-restore.outputs.cache-hit != 'true'
#        run: sudo make -C make -f compilers.mk install-sdcc
#
#      - name: Cache SDCC
#        id: cache-sdcc-save
#        uses: actions/cache/save@v3
#        with:
#          # This must be the same as the restore
#          path: |
#            /usr/local/bin/as2gbmap
#            /usr/local/bin/gpasm
#            /usr/local/bin/gpdasm
#            /usr/local/bin/gplink
#            /usr/local/bin/sdas*
#            /usr/local/bin/sdcc
#            /usr/local/bin/sdld*
#            /usr/local/share/gputils
#          key: ${{ steps.cache-sdcc-restore.outputs.cache-primary-key }}
      - name: Configure
        run: ./configure --cc=sdcc
      - name: Compile
        run: make library MY_CFLAGS=-m${{ matrix.architecture }}
