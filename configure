#!/bin/sh

set -e

. ./VERSION

unhosted=0
debug=0
additional_cflags=
additional_defines=
additional_ldflags=
prefix=/usr/local
minimal_flags=0
no_fatal_warnings=0
install_target_lib=
install_target_include=
install_target_bin=
install_target_pkgconfig=
cc=${CC:-}
machine=
c_standard='c99'

HELP_TEXT="
General-Purpose Flags
=====================
--cc COMPILER
    Override the default compiler.
-d | --debug
    Compile with debugging information.
-D name[=value]
    Define a macro to be passed to the preprocessor.
-F | --minimal-flags
    Only pass minimal flags to the compiler. Use this as the lowest common
    denominator when a compiler doesn't support GCC's most common flags.
-h | --help
    Show this help message.
-m ARCH | --machine=ARCH
    Define the processor architecture of the compilation target. Valid values
    depend on the selected compiler.
-p PATH | --prefix=PATH
    Change the top-level installation path for the library and headers. The
    library is placed in 'PATH/lib', headers in 'PATH/include', etc. Directories
    are created where necessary.
    Default: $prefix
--profiling
    Enable code coverage and performance profiling. Implies --debug, requires
    compiler to be GCC.
-u | --unhosted
    Unhosted mode -- do not use the C standard library. Functions such as strcmp
    will use compiler intrinsics if possible, or otherwise fall back to naive
    implementations. The default memory allocator won't be available at all.
-U name
    Undefine a preprocessor macro.
-w | --no-fatal-warnings
    Make warnings never fatal, neither when compiling the library nor when
    compiling the tests.
"

# TODO (dargueta): Allow overriding individual installation directories.
while [ -n "$1" ]; do
  flag=$(echo "$1" | cut -f1 -d=)
  eq_flag_argument=$(echo "$1" | cut -s -f2 -d=)

  case "$flag" in
    --cc )
      if [ -n "$eq_flag_argument" ]; then
        cc=$eq_flag_argument
      elif [ -n "$2" ]; then
        cc=$2
        shift
      else
        echo "A path is required for $flag."
        exit 1
      fi
      ;;
    -d | --debug ) debug=1 ;;
    -D )
      if [ -z "$2" ]; then
        echo "A macro definition is required for $flag."
        exit 1
      fi
      additional_defines="$additional_defines -D$2"
      shift
      ;;
    -h | --help )
      echo "$HELP_TEXT"
      exit 0
      ;;
    -F | --minimal-flags) minimal_flags=1 ;;
    -m | --machine )
      if [ -n "$eq_flag_argument" ]; then
        machine=$eq_flag_argument
      elif [ -n "$2" ]; then
        machine=$2
        shift
      else
        echo "A processor architecture is required for $flag."
        exit 1
      fi
      ;;
    -p | --pre | --prefix )
      if [ -n "$eq_flag_argument" ]; then
        prefix=$eq_flag_argument
      elif [ -n "$2" ]; then
        prefix=$2
        shift
      else
        echo "A path is required for $flag."
        exit 1
      fi
      ;;
    --profile )
      additional_cflags="$additional_cflags --coverage -pg -O0"
      additional_ldflags="$additional_ldflags --coverage"
      debug=1
      ;;
    -u | --unhosted ) unhosted=1 ;;
    -U )
      additional_defines="$additional_defines -U$2"
      shift
      ;;
    -w | --no-fatal-warnings ) no_fatal_warnings=1 ;;
    * )
      echo "Unrecognized option: '$flag'"
      exit 1
  esac

  shift
done


int_to_yesno() {
  if [ "$1" -eq 0 ]; then
    echo 'NO'
  else
    echo 'YES'
  fi
}

# Force `prefix` to be an absolute path. We do this by checking to see if the
# first character of the path is`/`.
if [ "${prefix}" != "${prefix#/}" ]; then
  absolute_top=$prefix
else
  absolute_top=$(pwd)/$prefix
  echo "NOTE: relative path passed as installation top. Expanding:"
  echo "$prefix -> $absolute_top"
  echo
fi

if [ -n "$cc" ]; then
  compiler_override="CC=$cc"
else
  compiler_override=
fi

echo "
Modes
-----
Debug    : $(int_to_yesno $debug)
Unhosted : $(int_to_yesno $unhosted)
Compiler override  : $cc
Non-fatal warnings : $(int_to_yesno $no_fatal_warnings)

Install Targets
---------------
  Prefix    : $absolute_top
  Headers   : ${install_target_include:-PREFIX/include/metaldata}
  Library   : ${install_target_lib:-PREFIX/lib}
  pkgconfig : ${install_target_pkgconfig:-LIBDIR/pkgconfig}

User-defined macros: $additional_defines
Target architecture: ${machine:-(native)}

Generating Makefile.in...
"
cat <<EOF > Makefile.in
UNHOSTED_IMPLEMENTATION=$unhosted
DEBUG_MODE=$debug
MACROS_FROM_CONFIGURE=$additional_defines
CFLAGS_FROM_CONFIGURE=$additional_cflags
LDFLAGS_FROM_CONFIGURE=$additional_ldflags
PREFIX=$absolute_top
INSTALL_TARGET_LIB=${install_target_lib:-\$(PREFIX)/lib}
INSTALL_TARGET_INCLUDE=${install_target_include:-\$(PREFIX)/include/metaldata}
INSTALL_TARGET_BIN=${install_target_bin:-\$(PREFIX)/bin}
INSTALL_TARGET_PKGCONFIG=${install_target_pkgconfig:-\$(INSTALL_TARGET_LIB)/pkgconfig}
VERSION_MAJOR=$MAJOR
VERSION_MINOR=$MINOR
VERSION_PATCH=$PATCH
VERSION_FULL=\$(VERSION_MAJOR).\$(VERSION_MINOR).\$(VERSION_PATCH)
USE_MINIMAL_FLAGS=$minimal_flags
NO_FATAL_WARNINGS=$no_fatal_warnings
$compiler_override
TARGET_ARCHITECTURE=$machine
C_STANDARD=$c_standard
EOF

echo "Done."
