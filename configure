#!/bin/sh

set -e

. ./VERSION

VERSION_FULL=${MAJOR}.${MINOR}.${PATCH}

unhosted=0
debug=0
additional_defines=
install_top=/usr/local
minimal_flags=0
no_fatal_warnings=0
no_fatal_test_warnings=0

HELP_TEXT="
General-Purpose Flags
=====================
-d
    Compile with debugging information.
-D name[=value]
    Define a macro to be passed to the preprocessor.
-h
    Show this help message.
-i PATH
    Change the top-level installation path for the library and headers. The
    library is placed in 'PATH/lib', headers in 'PATH/include', etc. Directories
    are created where necessary.
    Default: $install_top
-m
    Only pass minimal flags to the compiler. Use this as the lowest common
    denominator when a compiler doesn't support GCC's most common flags.
-u
    Unhosted mode -- do not use the C standard library. Functions such as strcmp
    will use compiler intrinsics if possible, or otherwise fall back to naive
    implementations. The default memory allocator won't be available at all.
-t
    Make warnings not fatal, but *only* when compiling tests.
-w
    Make warnings never fatal, neither when compiling the library nor when
    compiling the tests.
"


while getopts ':dD:hi:mtuw' flag; do
  case "$flag" in
    d ) debug=1 ;;
    D ) additional_defines="$additional_defines -D$OPTARG" ;;
    i ) install_top=$OPTARG ;;
    m ) minimal_flags=1 ;;
    w ) no_fatal_warnings=1 ;;
    t ) no_fatal_test_warnings=1 ;;
    u ) unhosted=1 ;;
    h )
      echo "$HELP_TEXT"
      exit 0
      ;;
    * )
      echo "Error: Unrecognized option '$OPTARG'"
      echo
      echo "$HELP_TEXT"
      exit 1
      ;;
  esac
done

int_to_yesno() {
  if [ "$1" -eq 0 ]; then
    echo 'NO'
  else
    echo 'YES'
  fi
}

if [ "${install_top}" != "${install_top#/}" ]; then
  absolute_top=$install_top
else
  absolute_top=$(pwd)/$install_top
  echo "NOTE: relative path passed as installation top. Expanding:"
  echo "$install_top -> $absolute_top"
  echo
fi

echo "Modes"
echo "-----"
echo "Debug    : $(int_to_yesno $debug)"
echo "Unhosted : $(int_to_yesno $unhosted)"
echo "Non-fatal warnings: $(int_to_yesno $no_fatal_warnings)"
echo
echo "Install to: $absolute_top"
echo "User-defined macros: $additional_defines"
echo
echo "Generating Makefile.in..."
cat <<EOF > Makefile.in
UNHOSTED_IMPLEMENTATION=$unhosted
DEBUG_MODE=$debug
MACROS_FROM_CONFIGURE=$additional_defines
INSTALL_TOP=$absolute_top
VERSION_MAJOR=$MAJOR
VERSION_MINOR=$MINOR
VERSION_PATCH=$PATCH
VERSION_FULL=\$(VERSION_MAJOR).\$(VERSION_MINOR).\$(VERSION_PATCH)
USE_MINIMAL_FLAGS=$minimal_flags
NO_FATAL_WARNINGS=$no_fatal_warnings
NO_FATAL_TEST_WARNINGS=$no_fatal_test_warnings
EOF

echo "Generating configuration header..."
cat <<EOF > src/metaldata/configuration.h
/* AUTOGENERATED -- DO NOT MODIFY */
#ifndef MDL_CONFIGURATION_H_
#define MDL_CONFIGURATION_H_
#define MDL_VERSION_MAJOR $MAJOR
#define MDL_VERSION_MINOR $MINOR
#define MDL_VERSION_PATCH $PATCH
#define MDL_VERSION_FULL ((MDL_VERSION_MAJOR * 10000) + \\
                         (MDL_VERSION_MINOR * 100) + \\
                         MDL_VERSION_PATCH)
#define MDL_VERSION_FULL_STRING "$VERSION_FULL"
#define MDL_COMPILED_AS_UNHOSTED $unhosted
#if !defined(MDL_CURRENTLY_COMPILING_LIBRARY) &&                                         \\
    !defined(MDL_CURRENTLY_COMPILING_TESTS) && defined(__STDC_HOSTED__)
#    if !MDL_COMPILED_AS_UNHOSTED && !__STDC_HOSTED__
#        error "Program is unhosted. Recompile MetalData for unhosted code."
#    endif
#endif /* __STDC_HOSTED__ */
#endif /* MDL_CONFIGURATION_H_ */
EOF

echo "Done."
